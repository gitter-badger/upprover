
TODO list for funfrog
=====================

HIGH PRIORITY
-------------

- PINCETTE stuff: xml-interface for output
- Upgrade check: optimize upward propagation (in case of multiple changes, change the root of common subtree), e.g. for 12_upg_simple_ref/change_15.c
- Repair slicing for upgrade check (e.g. 12_upg_simple_ref/change_13.c doesn't work without "--no-slicing")

LOW PRIORITY
------------

- Refinement: callstart symbols analysis for havoced partitions
- Conversion: phi-functions profiling
- Interactive mode of:
  - OpenSMT session - share one instance during checking of a single assertion
- Mapping for global variables, refactor:
  - unify accessed globals and arguments
  - unify modified globals and return value (the extra temp. variable is probably not needed - check it!).
- Aliasing
- UFLIA encoding
  - choose solver, create wrapper, interpolant back propagation
- Bit-vectors encoding
  - examine wolverine's interpolation engine


BUGS
----

- Too many symbols in the renaming tables (remove locals and the special call start and call end symbols)
- Slicing can remove "unrelated" assumptions that, however, make an error reaching trace unfeasible (thus reporting a nonexistent error).
- Error trace computation is broken - segfault on trace computation (not addapted to partitioning symex target yet)
- Unsufficient loop unwinding (k times, if there are loops with n>k iterations) leads to "assertion is trivially unreachable" if the assertion is in the same function, or to SAT if the loop is separated to different function.
- "--unwind n" in fact unwinds (n-1) times. The bug came from cbmc..

BUGGY TEST CASES:
----------------
- 13_upg_simple_holds/change19.c: (l.var_no()=2147483646 _no_variables=1052
	funfrog: ../../../src/egraph/EgraphStore.C:465: Enode* Egraph::cons(Enode*, Enode*): Assertion `car' failed.)

- floppy5.c: Segm fault in prop_itpt::is_valid() .. or actually if call any method of this object at that state

- floppy7.c: Segm fault in prop_itpt::substitute(prop_convt&, std::vector<symbol_exprt, std::allocator<symbol_exprt> > const&, bool) const().
	bug occurs only if uncomment "status = FloppyPnp(& devobj, pirp)" at main function

- floppy9.c: funfrog: ../../../src/proof/ProofGraphBuild.C:99: void ProofGraph::buildProofGraph(Proof&, std::set<int, std::less<int>, 			std::allocator<int> >&, int, clauseid_t, int): Assertion `currClause!=__null' failed.
  PROBLEM is due to pointers - no fix for the moment :-(
	bug occurs only if uncomment "status = FloppyPower(& devobj, pirp);" at main function

- floppy11.c: with slicing, the following interpolants are generated (after initial check):
  PROBLEM is due to pointers - no fix for the moment :-(
              -* c::main
              -* c::stub_driver_init
              -* c::FloppyCreateClose
              -* c::FloppyPnp
              -* c::IofCompleteRequest
              -* c::IofCompleteRequest
	with no-slicing, all the interpolants are trivial.
	Moreover, if comment "status = FloppyPnp(& devobj, pirp);", the following interpolants are generated, even with no-slicing.
              -* c::main
              -* c::stub_driver_init
              -* c::FloppyCreateClose
              -* c::IofCompleteRequest
