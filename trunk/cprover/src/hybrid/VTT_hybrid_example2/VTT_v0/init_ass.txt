P2P_Joints_TG3_e.c	68	assert( a != 0 );
P2P_Joints_TG3_e.c	70	assert( _ret_14 % a == 0 );
P2P_Joints_TG3_e.c	70	assert( a <= _ret_14 );
P2P_Joints_TG3_e.c	70	assert( a % _ret_14 == 0 );
P2P_Joints_TG3_e.c	70	assert( _ret_14 >= 1 );
P2P_Joints_TG3_e.c	70	assert( _ret_14 != 0 );
P2P_Joints_TG3_e.c	70	assert( a != 0 );
P2P_Joints_TG3_e.c	73	assert( _ret_16 % a == 0 );
P2P_Joints_TG3_e.c	73	assert( a <= _ret_16 );
P2P_Joints_TG3_e.c	73	assert( a % _ret_16 == 0 );
P2P_Joints_TG3_e.c	73	assert( _ret_16 >= 1 );
P2P_Joints_TG3_e.c	73	assert( _ret_16 != 0 );
P2P_Joints_TG3_e.c	73	assert( a != 0 );
P2P_Joints_TG3_e.c	78	assert( a > jp[0].t3 );
P2P_Joints_TG3_e.c	78	assert( a > jp[0].t1 );
P2P_Joints_TG3_e.c	78	assert( a > jp[0].delta );
P2P_Joints_TG3_e.c	78	assert( a > in[0] );
P2P_Joints_TG3_e.c	78	assert( a > fb[0] );
P2P_Joints_TG3_e.c	78	assert( a != jp[0].t2 );
P2P_Joints_TG3_e.c	78	assert( a != jp[0].a2 );
P2P_Joints_TG3_e.c	78	assert( a != jp[0].a1 );
P2P_Joints_TG3_e.c	78	assert( a != jl[3] );
P2P_Joints_TG3_e.c	78	assert( a != jl[2] );
P2P_Joints_TG3_e.c	78	assert( a != jl[1] );
P2P_Joints_TG3_e.c	78	assert( a != jl[0] );
P2P_Joints_TG3_e.c	78	assert( a != 0 );
P2P_Joints_TG3_e.c	80	assert( a > jp[0].t3 );
P2P_Joints_TG3_e.c	80	assert( a != jp[0].t2 );
P2P_Joints_TG3_e.c	80	assert( a > jp[0].t1 );
P2P_Joints_TG3_e.c	80	assert( a > jp[0].delta );
P2P_Joints_TG3_e.c	80	assert( a != jp[0].a2 );
P2P_Joints_TG3_e.c	80	assert( a != jp[0].a1 );
P2P_Joints_TG3_e.c	80	assert( a != jl[3] );
P2P_Joints_TG3_e.c	80	assert( a != jl[2] );
P2P_Joints_TG3_e.c	80	assert( a != jl[1] );
P2P_Joints_TG3_e.c	80	assert( a != jl[0] );
P2P_Joints_TG3_e.c	80	assert( a > in[0] );
P2P_Joints_TG3_e.c	80	assert( a > fb[0] );
P2P_Joints_TG3_e.c	80	assert( a != 0 );
P2P_Joints_TG3_e.c	80	assert( a == _ret_22 );
P2P_Joints_TG3_e.c	87	assert( a > jp[0].t3 );
P2P_Joints_TG3_e.c	87	assert( a != jp[0].t2 );
P2P_Joints_TG3_e.c	87	assert( a > jp[0].t1 );
P2P_Joints_TG3_e.c	87	assert( a > jp[0].delta );
P2P_Joints_TG3_e.c	87	assert( a != jp[0].a2 );
P2P_Joints_TG3_e.c	87	assert( a != jp[0].a1 );
P2P_Joints_TG3_e.c	87	assert( a != jl[3] );
P2P_Joints_TG3_e.c	87	assert( a != jl[2] );
P2P_Joints_TG3_e.c	87	assert( a != jl[1] );
P2P_Joints_TG3_e.c	87	assert( a != jl[0] );
P2P_Joints_TG3_e.c	87	assert( a > in[0] );
P2P_Joints_TG3_e.c	87	assert( a > fb[0] );
P2P_Joints_TG3_e.c	87	assert( a != 0 );
P2P_Joints_TG3_e.c	87	assert( a == _ret_28 );
P2P_Joints_TG3_e.c	188	assert( _ret_128 != 0 );
P2P_Joints_TG3_e.c	193	assert( jp[0].t3 >= 0 );
P2P_Joints_TG3_e.c	193	assert( jp[0].t1 >= 0 );
P2P_Joints_TG3_e.c	193	assert( jp[0].initVel >= 0 );
P2P_Joints_TG3_e.c	193	assert( jp[0].initPos >= 0 );
P2P_Joints_TG3_e.c	193	assert( jl[3] >= 0 );
P2P_Joints_TG3_e.c	193	assert( jl[2] >= 0 );
P2P_Joints_TG3_e.c	193	assert( jl[1] >= 0 );
P2P_Joints_TG3_e.c	193	assert( jl[1] != jp[0].a1 );
P2P_Joints_TG3_e.c	193	assert( jl[0] >= 0 );
P2P_Joints_TG3_e.c	193	assert( jl[0] != jp[0].delta );
P2P_Joints_TG3_e.c	193	assert( in[0] >= 0 );
P2P_Joints_TG3_e.c	193	assert( in[0] != jp[0].a1 );
P2P_Joints_TG3_e.c	193	assert( fb[0] >= 0 );
P2P_Joints_TG3_e.c	193	assert( fb[0] != jp[0].initVel );
P2P_Joints_TG3_e.c	247	assert( totalTime != vMax );
P2P_Joints_TG3_e.c	247	assert( maxTime != vMax );
P2P_Joints_TG3_e.c	247	assert( maxTime >= totalTime );
P2P_Joints_TG3_e.c	247	assert( jp[0].v <= vMax );
P2P_Joints_TG3_e.c	247	assert( jp[0].v != totalTime );
P2P_Joints_TG3_e.c	247	assert( jp[0].v != maxTime );
P2P_Joints_TG3_e.c	247	assert( jp[0].t3 <= vMax );
P2P_Joints_TG3_e.c	247	assert( jp[0].t2 <= maxTime );
P2P_Joints_TG3_e.c	247	assert( jp[0].t2 != jp[0].v );
P2P_Joints_TG3_e.c	247	assert( jp[0].a2 != totalTime );
P2P_Joints_TG3_e.c	247	assert( jp[0].a2 != maxTime );
P2P_Joints_TG3_e.c	247	assert( jp[0].a2 != jp[0].t1 );
P2P_Joints_TG3_e.c	247	assert( jp[0].a1 != totalTime );
P2P_Joints_TG3_e.c	247	assert( jp[0].a1 != maxTime );
P2P_Joints_TG3_e.c	247	assert( jp[0].a1 != jp[0].t3 );
P2P_Joints_TG3_e.c	247	assert( jp[0].a1 != jp[0].t2 );
P2P_Joints_TG3_e.c	247	assert( jp[0].a1 != jp[0].t1 );
P2P_Joints_TG3_e.c	247	assert( jl[3] != jp[0].t2 );
P2P_Joints_TG3_e.c	247	assert( jl[3] >= jp[0].a2 );
P2P_Joints_TG3_e.c	247	assert( jl[3] % jp[0].a2 == 0 );
P2P_Joints_TG3_e.c	247	assert( jl[2] != totalTime );
P2P_Joints_TG3_e.c	247	assert( jl[2] != maxTime );
P2P_Joints_TG3_e.c	247	assert( jl[1] != jp[0].delta );
P2P_Joints_TG3_e.c	247	assert( in[0] >= jp[0].delta );
P2P_Joints_TG3_e.c	247	assert( fb[0] != jp[0].a1 );
P2P_Joints_TG3_e.c	247	assert( delta2 > vMax );
P2P_Joints_TG3_e.c	247	assert( delta2 > totalTime );
P2P_Joints_TG3_e.c	247	assert( delta2 > maxTime );
P2P_Joints_TG3_e.c	247	assert( delta2 > jp[0].v );
P2P_Joints_TG3_e.c	247	assert( delta2 > jp[0].t3 );
P2P_Joints_TG3_e.c	247	assert( delta2 > jp[0].t2 );
P2P_Joints_TG3_e.c	247	assert( delta2 > jp[0].t1 );
P2P_Joints_TG3_e.c	247	assert( delta2 > jp[0].delta );
P2P_Joints_TG3_e.c	247	assert( delta2 > jp[0].a2 );
P2P_Joints_TG3_e.c	247	assert( delta2 > jp[0].a1 );
P2P_Joints_TG3_e.c	247	assert( delta2 > jl[3] );
P2P_Joints_TG3_e.c	247	assert( delta2 > jl[2] );
P2P_Joints_TG3_e.c	247	assert( delta2 > jl[1] );
P2P_Joints_TG3_e.c	247	assert( delta2 > in[0] );
P2P_Joints_TG3_e.c	247	assert( delta2 > i );
P2P_Joints_TG3_e.c	247	assert( delta2 > fb[0] );
P2P_Joints_TG3_e.c	247	assert( delta1 > vMax );
P2P_Joints_TG3_e.c	247	assert( delta1 > totalTime );
P2P_Joints_TG3_e.c	247	assert( delta1 > maxTime );
P2P_Joints_TG3_e.c	247	assert( delta1 > jp[0].v );
P2P_Joints_TG3_e.c	247	assert( delta1 > jp[0].t3 );
P2P_Joints_TG3_e.c	247	assert( delta1 > jp[0].t2 );
P2P_Joints_TG3_e.c	247	assert( delta1 > jp[0].t1 );
P2P_Joints_TG3_e.c	247	assert( delta1 > jp[0].delta );
P2P_Joints_TG3_e.c	247	assert( delta1 > jp[0].a2 );
P2P_Joints_TG3_e.c	247	assert( delta1 > jp[0].a1 );
P2P_Joints_TG3_e.c	247	assert( delta1 > jl[3] );
P2P_Joints_TG3_e.c	247	assert( delta1 > jl[2] );
P2P_Joints_TG3_e.c	247	assert( delta1 > jl[1] );
P2P_Joints_TG3_e.c	247	assert( delta1 > in[0] );
P2P_Joints_TG3_e.c	247	assert( delta1 > i );
P2P_Joints_TG3_e.c	247	assert( delta1 > fb[0] );
P2P_Joints_TG3_e.c	247	assert( delta1 != delta2 );
P2P_Joints_TG3_e.c	247	assert( delta0 > vMax );
P2P_Joints_TG3_e.c	247	assert( delta0 > totalTime );
P2P_Joints_TG3_e.c	247	assert( delta0 > maxTime );
P2P_Joints_TG3_e.c	247	assert( delta0 > jp[0].v );
P2P_Joints_TG3_e.c	247	assert( delta0 > jp[0].t3 );
P2P_Joints_TG3_e.c	247	assert( delta0 > jp[0].t2 );
P2P_Joints_TG3_e.c	247	assert( delta0 > jp[0].t1 );
P2P_Joints_TG3_e.c	247	assert( delta0 > jp[0].delta );
P2P_Joints_TG3_e.c	247	assert( delta0 > jp[0].a2 );
P2P_Joints_TG3_e.c	247	assert( delta0 > jp[0].a1 );
P2P_Joints_TG3_e.c	247	assert( delta0 > jl[3] );
P2P_Joints_TG3_e.c	247	assert( delta0 > jl[2] );
P2P_Joints_TG3_e.c	247	assert( delta0 > jl[1] );
P2P_Joints_TG3_e.c	247	assert( delta0 > in[0] );
P2P_Joints_TG3_e.c	247	assert( delta0 > i );
P2P_Joints_TG3_e.c	247	assert( delta0 > fb[0] );
P2P_Joints_TG3_e.c	247	assert( delta0 != delta2 );
P2P_Joints_TG3_e.c	247	assert( delta0 != delta1 );
P2P_Joints_TG3_e.c	247	assert( vMax >= 0 );
P2P_Joints_TG3_e.c	247	assert( maxTime >= 0 );
P2P_Joints_TG3_e.c	247	assert( jp[0].t3 >= 0 );
P2P_Joints_TG3_e.c	247	assert( jp[0].t1 >= 0 );
P2P_Joints_TG3_e.c	247	assert( jp[0].a2 != 0 );
P2P_Joints_TG3_e.c	247	assert( jp[0].a1 != 0 );
P2P_Joints_TG3_e.c	247	assert( jl[3] >= 0 );
P2P_Joints_TG3_e.c	247	assert( jl[2] >= 0 );
P2P_Joints_TG3_e.c	247	assert( jl[1] >= 0 );
P2P_Joints_TG3_e.c	247	assert( in[0] >= 0 );
P2P_Joints_TG3_e.c	247	assert( i == 1 );
P2P_Joints_TG3_e.c	247	assert( fb[0] >= 0 );
P2P_Joints_TG3_e.c	247	assert( delta2 != 0 );
P2P_Joints_TG3_e.c	247	assert( delta1 != 0 );
P2P_Joints_TG3_e.c	247	assert( delta0 != 0 );
P2P_Joints_TG3_e.c	247	assert( jl[1] == jp[0].initVel );
P2P_Joints_TG3_e.c	247	assert( jl[0] == vMax );
P2P_Joints_TG3_e.c	247	assert( fb[0] == jp[0].initPos );
P2P_Joints_TG3_e.c	276	assert( _ret_215 == 0 );
P2P_Joints_TG3_e.c	276	assert( jl[3] == 41 );
P2P_Joints_TG3_e.c	276	assert( jl[2] == 237 );
P2P_Joints_TG3_e.c	276	assert( jl[1] == 184 );
P2P_Joints_TG3_e.c	276	assert( jl[0] == 250 );
P2P_Joints_TG3_e.c	276	assert( j == -1073745392 );
P2P_Joints_TG3_e.c	276	assert( in[0] == 8 );
P2P_Joints_TG3_e.c	276	assert( i == -1 );
P2P_Joints_TG3_e.c	276	assert( fb[0] == 13 );
P2P_Joints_TG3_e.c	276	assert( jl[1] == jp[0].initVel );
P2P_Joints_TG3_e.c	276	assert( fb[0] == jp[0].initPos );
P2P_Joints_TG3_e.c	281	assert( vMax >= 0 );
P2P_Joints_TG3_e.c	281	assert( v0 >= 0 );
P2P_Joints_TG3_e.c	281	assert( start >= 0 );
P2P_Joints_TG3_e.c	281	assert( jp[0].t3 >= 0 );
P2P_Joints_TG3_e.c	281	assert( jp[0].t1 >= 0 );
P2P_Joints_TG3_e.c	281	assert( jp[0].initVel >= 0 );
P2P_Joints_TG3_e.c	281	assert( jp[0].initVel != start );
P2P_Joints_TG3_e.c	281	assert( jp[0].initPos >= 0 );
P2P_Joints_TG3_e.c	281	assert( jp[0].delta != vMax );
P2P_Joints_TG3_e.c	281	assert( jp[0].a1 != v0 );
P2P_Joints_TG3_e.c	281	assert( jl[1] == v0 );
P2P_Joints_TG3_e.c	281	assert( jl[0] == vMax );
P2P_Joints_TG3_e.c	281	assert( i == 0 );
P2P_Joints_TG3_e.c	281	assert( i <= vMax );
P2P_Joints_TG3_e.c	281	assert( i <= v0 );
P2P_Joints_TG3_e.c	281	assert( i <= start );
P2P_Joints_TG3_e.c	281	assert( i <= jp[0].t3 );
P2P_Joints_TG3_e.c	281	assert( i <= jp[0].t1 );
P2P_Joints_TG3_e.c	281	assert( i <= jp[0].initVel );
P2P_Joints_TG3_e.c	281	assert( i <= jp[0].initPos );
P2P_Joints_TG3_e.c	281	assert( fb[0] == start );
P2P_Joints_TG3_e.c	281	assert( end >= i );
P2P_Joints_TG3_e.c	281	assert( end >= 0 );
P2P_Joints_TG3_e.c	281	assert( end == in[0] );
P2P_Joints_TG3_e.c	281	assert( end != jp[0].a1 );
P2P_Joints_TG3_e.c	281	assert( dMax >= i );
P2P_Joints_TG3_e.c	281	assert( dMax >= 0 );
P2P_Joints_TG3_e.c	281	assert( dMax == jl[3] );
P2P_Joints_TG3_e.c	281	assert( aMax >= i );
P2P_Joints_TG3_e.c	281	assert( aMax >= 0 );
P2P_Joints_TG3_e.c	281	assert( aMax == jl[2] );
P2P_Joints_TG3_e.c	403	assert( dMax == jl[3] );
P2P_Joints_TG3_e.c	403	assert( aMax == jl[2] );
P2P_Joints_TG3_e.c	407	assert( jp[0].t3 == 0 || jp[0].t3 == 1 || jp[0].t3 == 14 );
P2P_Joints_TG3_e.c	407	assert( jp[0].t3 % jp[0].t1 == 0 );
P2P_Joints_TG3_e.c	407	assert( jp[0].t2 < jp[0].t3 );
P2P_Joints_TG3_e.c	407	assert( jp[0].t2 != 0 );
P2P_Joints_TG3_e.c	407	assert( jp[0].t1 > jp[0].t2 );
P2P_Joints_TG3_e.c	407	assert( jp[0].t1 == 1 || jp[0].t1 == 2 || jp[0].t1 == 3 || jp[0].t1 == 9 );
P2P_Joints_TG3_e.c	407	assert( jp[0].t1 != 0 );
P2P_Joints_TG3_e.c	407	assert( jp[0].delta >= 0 );
P2P_Joints_TG3_e.c	407	assert( jp[0].delta > jp[0].t2 );
P2P_Joints_TG3_e.c	407	assert( jp[0].a1 <= -1 );
P2P_Joints_TG3_e.c	407	assert( jp[0].a1 < jp[0].t3 );
P2P_Joints_TG3_e.c	407	assert( jp[0].a1 < jp[0].t1 );
P2P_Joints_TG3_e.c	407	assert( jp[0].a1 < jp[0].delta );
P2P_Joints_TG3_e.c	407	assert( jp[0].a1 % jl[3] == 0 );
P2P_Joints_TG3_e.c	407	assert( jp[0].a1 != jp[0].t2 );
P2P_Joints_TG3_e.c	407	assert( jp[0].a1 != 0 );
P2P_Joints_TG3_e.c	407	assert( jl[3] >= jp[0].t1 );
P2P_Joints_TG3_e.c	407	assert( jl[3] > jp[0].t2 );
P2P_Joints_TG3_e.c	407	assert( jl[3] > jp[0].a1 );
P2P_Joints_TG3_e.c	407	assert( jl[3] == jp[0].a2 );
P2P_Joints_TG3_e.c	407	assert( jl[3] % jp[0].a1 == 0 );
P2P_Joints_TG3_e.c	407	assert( jl[3] != jp[0].t3 );
P2P_Joints_TG3_e.c	407	assert( jl[2] > jp[0].t3 );
P2P_Joints_TG3_e.c	407	assert( jl[2] > jp[0].t2 );
P2P_Joints_TG3_e.c	407	assert( jl[2] > jp[0].t1 );
P2P_Joints_TG3_e.c	407	assert( jl[2] > jp[0].delta );
P2P_Joints_TG3_e.c	407	assert( jl[2] > jp[0].a1 );
P2P_Joints_TG3_e.c	407	assert( jl[1] > jp[0].t3 );
P2P_Joints_TG3_e.c	407	assert( jl[1] > jp[0].t2 );
P2P_Joints_TG3_e.c	407	assert( jl[1] > jp[0].t1 );
P2P_Joints_TG3_e.c	407	assert( jl[1] > jp[0].delta );
P2P_Joints_TG3_e.c	407	assert( jl[1] > jp[0].a1 );
P2P_Joints_TG3_e.c	407	assert( jl[1] == jp[0].initVel );
P2P_Joints_TG3_e.c	407	assert( jl[0] >= jp[0].t3 );
P2P_Joints_TG3_e.c	407	assert( jl[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	407	assert( jl[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	407	assert( jl[0] == jp[0].v );
P2P_Joints_TG3_e.c	407	assert( in[0] >= jp[0].t1 );
P2P_Joints_TG3_e.c	407	assert( in[0] >= jp[0].delta );
P2P_Joints_TG3_e.c	407	assert( in[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	407	assert( in[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	407	assert( in[0] != jp[0].t3 );
P2P_Joints_TG3_e.c	407	assert( i > jp[0].t2 );
P2P_Joints_TG3_e.c	407	assert( i > jp[0].a1 );
P2P_Joints_TG3_e.c	407	assert( i == totalTime );
P2P_Joints_TG3_e.c	407	assert( i == 0 );
P2P_Joints_TG3_e.c	407	assert( i <= jp[0].t3 );
P2P_Joints_TG3_e.c	407	assert( i <= jp[0].delta );
P2P_Joints_TG3_e.c	407	assert( i < jp[0].t1 );
P2P_Joints_TG3_e.c	407	assert( i < jl[3] );
P2P_Joints_TG3_e.c	407	assert( i < jl[2] );
P2P_Joints_TG3_e.c	407	assert( i < jl[1] );
P2P_Joints_TG3_e.c	407	assert( i < jl[0] );
P2P_Joints_TG3_e.c	407	assert( i < in[0] );
P2P_Joints_TG3_e.c	407	assert( fb[0] >= i );
P2P_Joints_TG3_e.c	407	assert( fb[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	407	assert( fb[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	407	assert( fb[0] == jp[0].initPos );
P2P_Joints_TG3_e.c	407	assert( fb[0] != jp[0].delta );
P2P_Joints_TG3_e.c	437	assert( jp[0].t3 <= newV );
P2P_Joints_TG3_e.c	437	assert( jp[0].t2 < newV );
P2P_Joints_TG3_e.c	437	assert( jp[0].t2 <= jp[0].t3 );
P2P_Joints_TG3_e.c	437	assert( jp[0].t1 != newV );
P2P_Joints_TG3_e.c	437	assert( jp[0].t1 >= jp[0].t3 );
P2P_Joints_TG3_e.c	437	assert( jp[0].t1 >= jp[0].t2 );
P2P_Joints_TG3_e.c	437	assert( jp[0].delta >= jp[0].t2 );
P2P_Joints_TG3_e.c	437	assert( jp[0].a1 < newV );
P2P_Joints_TG3_e.c	437	assert( jp[0].a1 < jp[0].t3 );
P2P_Joints_TG3_e.c	437	assert( jp[0].a1 != jp[0].t2 );
P2P_Joints_TG3_e.c	437	assert( jp[0].a1 < jp[0].t1 );
P2P_Joints_TG3_e.c	437	assert( jp[0].a1 < jp[0].delta );
P2P_Joints_TG3_e.c	437	assert( jl[3] != newV );
P2P_Joints_TG3_e.c	437	assert( jl[3] != jp[0].t3 );
P2P_Joints_TG3_e.c	437	assert( jl[3] > jp[0].t2 );
P2P_Joints_TG3_e.c	437	assert( jl[3] != jp[0].t1 );
P2P_Joints_TG3_e.c	437	assert( jp[0].a1 % jl[3] == 0 );
P2P_Joints_TG3_e.c	437	assert( jl[3] > jp[0].a1 );
P2P_Joints_TG3_e.c	437	assert( jl[3] % jp[0].a1 == 0 );
P2P_Joints_TG3_e.c	437	assert( jl[2] > newV );
P2P_Joints_TG3_e.c	437	assert( jl[2] > jp[0].t3 );
P2P_Joints_TG3_e.c	437	assert( jl[2] > jp[0].t2 );
P2P_Joints_TG3_e.c	437	assert( jl[2] != jp[0].t1 );
P2P_Joints_TG3_e.c	437	assert( jl[2] > jp[0].delta );
P2P_Joints_TG3_e.c	437	assert( jl[2] > jp[0].a1 );
P2P_Joints_TG3_e.c	437	assert( jl[1] > newV );
P2P_Joints_TG3_e.c	437	assert( jl[1] > jp[0].t3 );
P2P_Joints_TG3_e.c	437	assert( jl[1] > jp[0].t2 );
P2P_Joints_TG3_e.c	437	assert( jl[1] > jp[0].t1 );
P2P_Joints_TG3_e.c	437	assert( jl[1] > jp[0].delta );
P2P_Joints_TG3_e.c	437	assert( jl[1] > jp[0].a1 );
P2P_Joints_TG3_e.c	437	assert( in[0] != newV );
P2P_Joints_TG3_e.c	437	assert( in[0] != jp[0].t3 );
P2P_Joints_TG3_e.c	437	assert( in[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	437	assert( in[0] >= jp[0].delta );
P2P_Joints_TG3_e.c	437	assert( in[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	437	assert( i < newV );
P2P_Joints_TG3_e.c	437	assert( i <= jp[0].t3 );
P2P_Joints_TG3_e.c	437	assert( i >= jp[0].t2 );
P2P_Joints_TG3_e.c	437	assert( i <= jp[0].t1 );
P2P_Joints_TG3_e.c	437	assert( i <= jp[0].delta );
P2P_Joints_TG3_e.c	437	assert( i > jp[0].a1 );
P2P_Joints_TG3_e.c	437	assert( i < jl[3] );
P2P_Joints_TG3_e.c	437	assert( i < jl[2] );
P2P_Joints_TG3_e.c	437	assert( i < jl[1] );
P2P_Joints_TG3_e.c	437	assert( i < in[0] );
P2P_Joints_TG3_e.c	437	assert( fb[0] >= jp[0].t2 );
P2P_Joints_TG3_e.c	437	assert( fb[0] != jp[0].delta );
P2P_Joints_TG3_e.c	437	assert( fb[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	437	assert( fb[0] >= i );
P2P_Joints_TG3_e.c	437	assert( newV >= 1 );
P2P_Joints_TG3_e.c	437	assert( newV != 0 );
P2P_Joints_TG3_e.c	437	assert( jp[0].t3 == 0 || jp[0].t3 == 1 || jp[0].t3 == 14 );
P2P_Joints_TG3_e.c	437	assert( jp[0].t2 <= 0 );
P2P_Joints_TG3_e.c	437	assert( jp[0].t1 >= 0 );
P2P_Joints_TG3_e.c	437	assert( jp[0].delta >= 0 );
P2P_Joints_TG3_e.c	437	assert( jp[0].a1 <= -1 );
P2P_Joints_TG3_e.c	437	assert( jp[0].a1 != 0 );
P2P_Joints_TG3_e.c	437	assert( i == 0 );
P2P_Joints_TG3_e.c	437	assert( jp[0].v == newV );
P2P_Joints_TG3_e.c	437	assert( jl[3] == jp[0].a2 );
P2P_Joints_TG3_e.c	437	assert( jl[1] == jp[0].initVel );
P2P_Joints_TG3_e.c	437	assert( jl[0] == newV );
P2P_Joints_TG3_e.c	437	assert( i == totalTime );
P2P_Joints_TG3_e.c	437	assert( fb[0] == jp[0].initPos );
P2P_Joints_TG3_e.c	441	assert( x >= 0 );
P2P_Joints_TG3_e.c	441	assert( v0 != x );
P2P_Joints_TG3_e.c	441	assert( jp[0].delta <= x );
P2P_Joints_TG3_e.c	441	assert( jp[0].delta != v0 );
P2P_Joints_TG3_e.c	441	assert( jp[0].a1 != x );
P2P_Joints_TG3_e.c	441	assert( jp[0].a1 != v0 );
P2P_Joints_TG3_e.c	441	assert( jl[1] >= v0 );
P2P_Joints_TG3_e.c	441	assert( jl[1] != x );
P2P_Joints_TG3_e.c	441	assert( in[0] >= jp[0].delta );
P2P_Joints_TG3_e.c	441	assert( in[0] >= 0 );
P2P_Joints_TG3_e.c	441	assert( in[0] != jp[0].a1 );
P2P_Joints_TG3_e.c	441	assert( d <= jl[3] );
P2P_Joints_TG3_e.c	441	assert( a <= jl[2] );
P2P_Joints_TG3_e.c	490	assert( v0 != x );
P2P_Joints_TG3_e.c	490	assert( result != x );
P2P_Joints_TG3_e.c	490	assert( result != v0 );
P2P_Joints_TG3_e.c	490	assert( num != x );
P2P_Joints_TG3_e.c	490	assert( num != v0 );
P2P_Joints_TG3_e.c	490	assert( jp[0].v != num );
P2P_Joints_TG3_e.c	490	assert( jp[0].delta <= x );
P2P_Joints_TG3_e.c	490	assert( jp[0].delta != v0 );
P2P_Joints_TG3_e.c	490	assert( jp[0].delta != result );
P2P_Joints_TG3_e.c	490	assert( jp[0].delta != num );
P2P_Joints_TG3_e.c	490	assert( jp[0].a2 != result );
P2P_Joints_TG3_e.c	490	assert( jp[0].a2 != num );
P2P_Joints_TG3_e.c	490	assert( jp[0].a1 != x );
P2P_Joints_TG3_e.c	490	assert( jp[0].a1 != v0 );
P2P_Joints_TG3_e.c	490	assert( jp[0].a1 != result );
P2P_Joints_TG3_e.c	490	assert( jp[0].a1 != num );
P2P_Joints_TG3_e.c	490	assert( jl[2] != result );
P2P_Joints_TG3_e.c	490	assert( jl[2] != num );
P2P_Joints_TG3_e.c	490	assert( jl[1] != x );
P2P_Joints_TG3_e.c	490	assert( jl[1] >= v0 );
P2P_Joints_TG3_e.c	490	assert( jl[1] != result );
P2P_Joints_TG3_e.c	490	assert( jl[1] != num );
P2P_Joints_TG3_e.c	490	assert( jl[0] != result );
P2P_Joints_TG3_e.c	490	assert( jl[0] != num );
P2P_Joints_TG3_e.c	490	assert( in[0] >= jp[0].delta );
P2P_Joints_TG3_e.c	490	assert( in[0] != jp[0].a1 );
P2P_Joints_TG3_e.c	490	assert( fb[0] != result );
P2P_Joints_TG3_e.c	490	assert( fb[0] != num );
P2P_Joints_TG3_e.c	490	assert( den != x );
P2P_Joints_TG3_e.c	490	assert( den != num );
P2P_Joints_TG3_e.c	490	assert( den != jp[0].t2 );
P2P_Joints_TG3_e.c	490	assert( den != jp[0].t1 );
P2P_Joints_TG3_e.c	490	assert( den != jp[0].delta );
P2P_Joints_TG3_e.c	490	assert( den != jp[0].a1 );
P2P_Joints_TG3_e.c	490	assert( den != in[0] );
P2P_Joints_TG3_e.c	490	assert( d <= jl[3] );
P2P_Joints_TG3_e.c	490	assert( a != result );
P2P_Joints_TG3_e.c	490	assert( a != num );
P2P_Joints_TG3_e.c	490	assert( a <= jl[2] );
P2P_Joints_TG3_e.c	490	assert( x >= 0 );
P2P_Joints_TG3_e.c	490	assert( result >= 0 );
P2P_Joints_TG3_e.c	490	assert( in[0] >= 0 );
P2P_Joints_TG3_e.c	490	assert( den != 0 );
P2P_Joints_TG3_e.c	490	assert( result == _ret_428 );
P2P_Joints_TG3_e.c	498	assert( v0 != x );
P2P_Joints_TG3_e.c	498	assert( result != x );
P2P_Joints_TG3_e.c	498	assert( result != v0 );
P2P_Joints_TG3_e.c	498	assert( num != x );
P2P_Joints_TG3_e.c	498	assert( num != v0 );
P2P_Joints_TG3_e.c	498	assert( jp[0].v != num );
P2P_Joints_TG3_e.c	498	assert( jp[0].delta <= x );
P2P_Joints_TG3_e.c	498	assert( jp[0].delta != v0 );
P2P_Joints_TG3_e.c	498	assert( jp[0].delta != result );
P2P_Joints_TG3_e.c	498	assert( jp[0].delta != num );
P2P_Joints_TG3_e.c	498	assert( jp[0].a2 != result );
P2P_Joints_TG3_e.c	498	assert( jp[0].a2 != num );
P2P_Joints_TG3_e.c	498	assert( jp[0].a1 != x );
P2P_Joints_TG3_e.c	498	assert( jp[0].a1 != v0 );
P2P_Joints_TG3_e.c	498	assert( jp[0].a1 != result );
P2P_Joints_TG3_e.c	498	assert( jp[0].a1 != num );
P2P_Joints_TG3_e.c	498	assert( jl[2] != result );
P2P_Joints_TG3_e.c	498	assert( jl[2] != num );
P2P_Joints_TG3_e.c	498	assert( jl[1] != x );
P2P_Joints_TG3_e.c	498	assert( jl[1] >= v0 );
P2P_Joints_TG3_e.c	498	assert( jl[1] != result );
P2P_Joints_TG3_e.c	498	assert( jl[1] != num );
P2P_Joints_TG3_e.c	498	assert( jl[0] != result );
P2P_Joints_TG3_e.c	498	assert( jl[0] != num );
P2P_Joints_TG3_e.c	498	assert( in[0] >= jp[0].delta );
P2P_Joints_TG3_e.c	498	assert( in[0] != jp[0].a1 );
P2P_Joints_TG3_e.c	498	assert( fb[0] != result );
P2P_Joints_TG3_e.c	498	assert( fb[0] != num );
P2P_Joints_TG3_e.c	498	assert( den != x );
P2P_Joints_TG3_e.c	498	assert( den != num );
P2P_Joints_TG3_e.c	498	assert( den != jp[0].t2 );
P2P_Joints_TG3_e.c	498	assert( den != jp[0].t1 );
P2P_Joints_TG3_e.c	498	assert( den != jp[0].delta );
P2P_Joints_TG3_e.c	498	assert( den != jp[0].a1 );
P2P_Joints_TG3_e.c	498	assert( den != in[0] );
P2P_Joints_TG3_e.c	498	assert( d <= jl[3] );
P2P_Joints_TG3_e.c	498	assert( a != result );
P2P_Joints_TG3_e.c	498	assert( a != num );
P2P_Joints_TG3_e.c	498	assert( a <= jl[2] );
P2P_Joints_TG3_e.c	498	assert( x >= 0 );
P2P_Joints_TG3_e.c	498	assert( result >= 0 );
P2P_Joints_TG3_e.c	498	assert( in[0] >= 0 );
P2P_Joints_TG3_e.c	498	assert( den != 0 );
P2P_Joints_TG3_e.c	498	assert( result == _ret_435 );
P2P_Joints_TG3_e.c	502	assert( v0 != x );
P2P_Joints_TG3_e.c	502	assert( result != x );
P2P_Joints_TG3_e.c	502	assert( result != v0 );
P2P_Joints_TG3_e.c	502	assert( num != x );
P2P_Joints_TG3_e.c	502	assert( num != v0 );
P2P_Joints_TG3_e.c	502	assert( jp[0].v != num );
P2P_Joints_TG3_e.c	502	assert( jp[0].delta <= x );
P2P_Joints_TG3_e.c	502	assert( jp[0].delta != v0 );
P2P_Joints_TG3_e.c	502	assert( jp[0].delta != result );
P2P_Joints_TG3_e.c	502	assert( jp[0].delta != num );
P2P_Joints_TG3_e.c	502	assert( jp[0].a2 != result );
P2P_Joints_TG3_e.c	502	assert( jp[0].a2 != num );
P2P_Joints_TG3_e.c	502	assert( jp[0].a1 != x );
P2P_Joints_TG3_e.c	502	assert( jp[0].a1 != v0 );
P2P_Joints_TG3_e.c	502	assert( jp[0].a1 != result );
P2P_Joints_TG3_e.c	502	assert( jp[0].a1 != num );
P2P_Joints_TG3_e.c	502	assert( jl[2] != result );
P2P_Joints_TG3_e.c	502	assert( jl[2] != num );
P2P_Joints_TG3_e.c	502	assert( jl[1] != x );
P2P_Joints_TG3_e.c	502	assert( jl[1] >= v0 );
P2P_Joints_TG3_e.c	502	assert( jl[1] != result );
P2P_Joints_TG3_e.c	502	assert( jl[1] != num );
P2P_Joints_TG3_e.c	502	assert( jl[0] != result );
P2P_Joints_TG3_e.c	502	assert( jl[0] != num );
P2P_Joints_TG3_e.c	502	assert( in[0] >= jp[0].delta );
P2P_Joints_TG3_e.c	502	assert( in[0] != jp[0].a1 );
P2P_Joints_TG3_e.c	502	assert( fb[0] != result );
P2P_Joints_TG3_e.c	502	assert( fb[0] != num );
P2P_Joints_TG3_e.c	502	assert( den != x );
P2P_Joints_TG3_e.c	502	assert( den != num );
P2P_Joints_TG3_e.c	502	assert( den != jp[0].t2 );
P2P_Joints_TG3_e.c	502	assert( den != jp[0].t1 );
P2P_Joints_TG3_e.c	502	assert( den != jp[0].delta );
P2P_Joints_TG3_e.c	502	assert( den != jp[0].a1 );
P2P_Joints_TG3_e.c	502	assert( den != in[0] );
P2P_Joints_TG3_e.c	502	assert( d <= jl[3] );
P2P_Joints_TG3_e.c	502	assert( a != result );
P2P_Joints_TG3_e.c	502	assert( a != num );
P2P_Joints_TG3_e.c	502	assert( a <= jl[2] );
P2P_Joints_TG3_e.c	502	assert( x >= 0 );
P2P_Joints_TG3_e.c	502	assert( result >= 0 );
P2P_Joints_TG3_e.c	502	assert( in[0] >= 0 );
P2P_Joints_TG3_e.c	502	assert( den != 0 );
P2P_Joints_TG3_e.c	502	assert( result == _ret_438 );
P2P_Joints_TG3_e.c	507	assert( jp[0].t3 == 0 || jp[0].t3 == 1 || jp[0].t3 == 14 );
P2P_Joints_TG3_e.c	507	assert( jp[0].t3 % jp[0].t1 == 0 );
P2P_Joints_TG3_e.c	507	assert( jp[0].t2 < jp[0].t3 );
P2P_Joints_TG3_e.c	507	assert( jp[0].t2 != 0 );
P2P_Joints_TG3_e.c	507	assert( jp[0].t1 > jp[0].t2 );
P2P_Joints_TG3_e.c	507	assert( jp[0].t1 == 1 || jp[0].t1 == 2 || jp[0].t1 == 3 || jp[0].t1 == 9 );
P2P_Joints_TG3_e.c	507	assert( jp[0].t1 != 0 );
P2P_Joints_TG3_e.c	507	assert( jp[0].delta >= 0 );
P2P_Joints_TG3_e.c	507	assert( jp[0].delta > jp[0].t2 );
P2P_Joints_TG3_e.c	507	assert( jp[0].a1 <= -1 );
P2P_Joints_TG3_e.c	507	assert( jp[0].a1 < jp[0].t3 );
P2P_Joints_TG3_e.c	507	assert( jp[0].a1 < jp[0].t1 );
P2P_Joints_TG3_e.c	507	assert( jp[0].a1 < jp[0].delta );
P2P_Joints_TG3_e.c	507	assert( jp[0].a1 % jl[3] == 0 );
P2P_Joints_TG3_e.c	507	assert( jp[0].a1 != jp[0].t2 );
P2P_Joints_TG3_e.c	507	assert( jp[0].a1 != 0 );
P2P_Joints_TG3_e.c	507	assert( jl[3] >= jp[0].t1 );
P2P_Joints_TG3_e.c	507	assert( jl[3] > jp[0].t2 );
P2P_Joints_TG3_e.c	507	assert( jl[3] > jp[0].a1 );
P2P_Joints_TG3_e.c	507	assert( jl[3] == jp[0].a2 );
P2P_Joints_TG3_e.c	507	assert( jl[3] % jp[0].a1 == 0 );
P2P_Joints_TG3_e.c	507	assert( jl[3] != jp[0].t3 );
P2P_Joints_TG3_e.c	507	assert( jl[2] > jp[0].t3 );
P2P_Joints_TG3_e.c	507	assert( jl[2] > jp[0].t2 );
P2P_Joints_TG3_e.c	507	assert( jl[2] > jp[0].t1 );
P2P_Joints_TG3_e.c	507	assert( jl[2] > jp[0].delta );
P2P_Joints_TG3_e.c	507	assert( jl[2] > jp[0].a1 );
P2P_Joints_TG3_e.c	507	assert( jl[1] > jp[0].t3 );
P2P_Joints_TG3_e.c	507	assert( jl[1] > jp[0].t2 );
P2P_Joints_TG3_e.c	507	assert( jl[1] > jp[0].t1 );
P2P_Joints_TG3_e.c	507	assert( jl[1] > jp[0].delta );
P2P_Joints_TG3_e.c	507	assert( jl[1] > jp[0].a1 );
P2P_Joints_TG3_e.c	507	assert( jl[1] == jp[0].initVel );
P2P_Joints_TG3_e.c	507	assert( jl[0] >= jp[0].t3 );
P2P_Joints_TG3_e.c	507	assert( jl[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	507	assert( jl[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	507	assert( jl[0] == jp[0].v );
P2P_Joints_TG3_e.c	507	assert( in[0] >= jp[0].t1 );
P2P_Joints_TG3_e.c	507	assert( in[0] >= jp[0].delta );
P2P_Joints_TG3_e.c	507	assert( in[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	507	assert( in[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	507	assert( in[0] < jl[2] );
P2P_Joints_TG3_e.c	507	assert( in[0] < jl[1] );
P2P_Joints_TG3_e.c	507	assert( in[0] != jp[0].t3 );
P2P_Joints_TG3_e.c	507	assert( in[0] != jl[3] );
P2P_Joints_TG3_e.c	507	assert( in[0] != jl[0] );
P2P_Joints_TG3_e.c	507	assert( in[0] != 0 );
P2P_Joints_TG3_e.c	507	assert( i > jp[0].t2 );
P2P_Joints_TG3_e.c	507	assert( i > jp[0].a1 );
P2P_Joints_TG3_e.c	507	assert( i == totalTime );
P2P_Joints_TG3_e.c	507	assert( i == 0 );
P2P_Joints_TG3_e.c	507	assert( i <= jp[0].t3 );
P2P_Joints_TG3_e.c	507	assert( i <= jp[0].delta );
P2P_Joints_TG3_e.c	507	assert( i < jp[0].t1 );
P2P_Joints_TG3_e.c	507	assert( i < jl[3] );
P2P_Joints_TG3_e.c	507	assert( i < jl[2] );
P2P_Joints_TG3_e.c	507	assert( i < jl[1] );
P2P_Joints_TG3_e.c	507	assert( i < jl[0] );
P2P_Joints_TG3_e.c	507	assert( i < in[0] );
P2P_Joints_TG3_e.c	507	assert( fb[0] >= i );
P2P_Joints_TG3_e.c	507	assert( fb[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	507	assert( fb[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	507	assert( fb[0] == jp[0].initPos );
P2P_Joints_TG3_e.c	507	assert( fb[0] <= in[0] );
P2P_Joints_TG3_e.c	507	assert( fb[0] != jp[0].delta );
P2P_Joints_TG3_e.c	541	assert( _ret_476 != sqop );
P2P_Joints_TG3_e.c	541	assert( jp[0].t3 <= sqop );
P2P_Joints_TG3_e.c	541	assert( jp[0].t3 <= _ret_476 );
P2P_Joints_TG3_e.c	541	assert( jp[0].t2 < sqop );
P2P_Joints_TG3_e.c	541	assert( jp[0].t2 < _ret_476 );
P2P_Joints_TG3_e.c	541	assert( jp[0].t2 < jp[0].t3 );
P2P_Joints_TG3_e.c	541	assert( jp[0].t3 % jp[0].t1 == 0 );
P2P_Joints_TG3_e.c	541	assert( jp[0].t1 > jp[0].t2 );
P2P_Joints_TG3_e.c	541	assert( jp[0].delta > jp[0].t2 );
P2P_Joints_TG3_e.c	541	assert( jp[0].a1 < sqop );
P2P_Joints_TG3_e.c	541	assert( jp[0].a1 < _ret_476 );
P2P_Joints_TG3_e.c	541	assert( jp[0].a1 < jp[0].t3 );
P2P_Joints_TG3_e.c	541	assert( jp[0].a1 != jp[0].t2 );
P2P_Joints_TG3_e.c	541	assert( jp[0].a1 < jp[0].t1 );
P2P_Joints_TG3_e.c	541	assert( jp[0].a1 < jp[0].delta );
P2P_Joints_TG3_e.c	541	assert( jl[2] != sqop );
P2P_Joints_TG3_e.c	541	assert( jl[2] > jp[0].t3 );
P2P_Joints_TG3_e.c	541	assert( jl[2] > jp[0].t2 );
P2P_Joints_TG3_e.c	541	assert( jl[2] > jp[0].t1 );
P2P_Joints_TG3_e.c	541	assert( jl[2] > jp[0].delta );
P2P_Joints_TG3_e.c	541	assert( jl[2] > jp[0].a1 );
P2P_Joints_TG3_e.c	541	assert( jl[1] != sqop );
P2P_Joints_TG3_e.c	541	assert( jl[1] > jp[0].t3 );
P2P_Joints_TG3_e.c	541	assert( jl[1] > jp[0].t2 );
P2P_Joints_TG3_e.c	541	assert( jl[1] > jp[0].t1 );
P2P_Joints_TG3_e.c	541	assert( jl[1] > jp[0].delta );
P2P_Joints_TG3_e.c	541	assert( jl[1] > jp[0].a1 );
P2P_Joints_TG3_e.c	541	assert( in[0] != sqop );
P2P_Joints_TG3_e.c	541	assert( in[0] != _ret_476 );
P2P_Joints_TG3_e.c	541	assert( in[0] != jp[0].t3 );
P2P_Joints_TG3_e.c	541	assert( in[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	541	assert( in[0] >= jp[0].t1 );
P2P_Joints_TG3_e.c	541	assert( in[0] >= jp[0].delta );
P2P_Joints_TG3_e.c	541	assert( in[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	541	assert( in[0] < jl[2] );
P2P_Joints_TG3_e.c	541	assert( in[0] < jl[1] );
P2P_Joints_TG3_e.c	541	assert( fb[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	541	assert( fb[0] != jp[0].delta );
P2P_Joints_TG3_e.c	541	assert( fb[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	541	assert( fb[0] <= in[0] );
P2P_Joints_TG3_e.c	541	assert( c != sqop );
P2P_Joints_TG3_e.c	541	assert( c > _ret_476 );
P2P_Joints_TG3_e.c	541	assert( c > jp[0].t3 );
P2P_Joints_TG3_e.c	541	assert( c > jp[0].t2 );
P2P_Joints_TG3_e.c	541	assert( c > jp[0].t1 );
P2P_Joints_TG3_e.c	541	assert( c > jp[0].delta );
P2P_Joints_TG3_e.c	541	assert( c > jp[0].a1 );
P2P_Joints_TG3_e.c	541	assert( c != jl[2] );
P2P_Joints_TG3_e.c	541	assert( c != jl[1] );
P2P_Joints_TG3_e.c	541	assert( c > in[0] );
P2P_Joints_TG3_e.c	541	assert( c > fb[0] );
P2P_Joints_TG3_e.c	541	assert( b <= sqop );
P2P_Joints_TG3_e.c	541	assert( b < _ret_476 );
P2P_Joints_TG3_e.c	541	assert( b <= jp[0].t3 );
P2P_Joints_TG3_e.c	541	assert( b < jp[0].t1 );
P2P_Joints_TG3_e.c	541	assert( b <= jp[0].delta );
P2P_Joints_TG3_e.c	541	assert( b != jp[0].a1 );
P2P_Joints_TG3_e.c	541	assert( b < jl[2] );
P2P_Joints_TG3_e.c	541	assert( b < jl[1] );
P2P_Joints_TG3_e.c	541	assert( b < in[0] );
P2P_Joints_TG3_e.c	541	assert( b <= fb[0] );
P2P_Joints_TG3_e.c	541	assert( b < c );
P2P_Joints_TG3_e.c	541	assert( a <= sqop );
P2P_Joints_TG3_e.c	541	assert( a < _ret_476 );
P2P_Joints_TG3_e.c	541	assert( a <= jp[0].t3 );
P2P_Joints_TG3_e.c	541	assert( a > jp[0].t2 );
P2P_Joints_TG3_e.c	541	assert( a < jp[0].t1 );
P2P_Joints_TG3_e.c	541	assert( a <= jp[0].delta );
P2P_Joints_TG3_e.c	541	assert( a > jp[0].a1 );
P2P_Joints_TG3_e.c	541	assert( a < jl[2] );
P2P_Joints_TG3_e.c	541	assert( a < jl[1] );
P2P_Joints_TG3_e.c	541	assert( a < in[0] );
P2P_Joints_TG3_e.c	541	assert( a <= fb[0] );
P2P_Joints_TG3_e.c	541	assert( a < c );
P2P_Joints_TG3_e.c	541	assert( a >= b );
P2P_Joints_TG3_e.c	541	assert( Vp2 > sqop );
P2P_Joints_TG3_e.c	541	assert( Vp2 > _ret_476 );
P2P_Joints_TG3_e.c	541	assert( Vp2 > jp[0].t3 );
P2P_Joints_TG3_e.c	541	assert( Vp2 > jp[0].t2 );
P2P_Joints_TG3_e.c	541	assert( Vp2 > jp[0].t1 );
P2P_Joints_TG3_e.c	541	assert( Vp2 > jp[0].delta );
P2P_Joints_TG3_e.c	541	assert( Vp2 > jp[0].a1 );
P2P_Joints_TG3_e.c	541	assert( Vp2 > jl[2] );
P2P_Joints_TG3_e.c	541	assert( Vp2 > jl[1] );
P2P_Joints_TG3_e.c	541	assert( Vp2 > in[0] );
P2P_Joints_TG3_e.c	541	assert( Vp2 > fb[0] );
P2P_Joints_TG3_e.c	541	assert( Vp2 > c );
P2P_Joints_TG3_e.c	541	assert( Vp2 > b );
P2P_Joints_TG3_e.c	541	assert( Vp1 != sqop );
P2P_Joints_TG3_e.c	541	assert( Vp1 != _ret_476 );
P2P_Joints_TG3_e.c	541	assert( Vp1 != jp[0].t3 );
P2P_Joints_TG3_e.c	541	assert( Vp1 > jp[0].t2 );
P2P_Joints_TG3_e.c	541	assert( Vp1 >= jp[0].t1 );
P2P_Joints_TG3_e.c	541	assert( jp[0].a1 % Vp1 == 0 );
P2P_Joints_TG3_e.c	541	assert( Vp1 > jp[0].a1 );
P2P_Joints_TG3_e.c	541	assert( Vp1 % jp[0].a1 == 0 );
P2P_Joints_TG3_e.c	541	assert( Vp1 != jl[2] );
P2P_Joints_TG3_e.c	541	assert( Vp1 != jl[1] );
P2P_Joints_TG3_e.c	541	assert( Vp1 != in[0] );
P2P_Joints_TG3_e.c	541	assert( Vp1 != fb[0] );
P2P_Joints_TG3_e.c	541	assert( Vp1 != c );
P2P_Joints_TG3_e.c	541	assert( Vp1 > b );
P2P_Joints_TG3_e.c	541	assert( Vp1 > a );
P2P_Joints_TG3_e.c	541	assert( Vp1 < Vp2 );
P2P_Joints_TG3_e.c	541	assert( sqop >= 0 );
P2P_Joints_TG3_e.c	541	assert( _ret_476 >= 1 );
P2P_Joints_TG3_e.c	541	assert( _ret_476 != 0 );
P2P_Joints_TG3_e.c	541	assert( jp[0].t3 == 0 || jp[0].t3 == 1 || jp[0].t3 == 14 );
P2P_Joints_TG3_e.c	541	assert( jp[0].t2 != 0 );
P2P_Joints_TG3_e.c	541	assert( jp[0].t1 != 0 );
P2P_Joints_TG3_e.c	541	assert( jp[0].t1 == 1 || jp[0].t1 == 2 || jp[0].t1 == 3 || jp[0].t1 == 9 );
P2P_Joints_TG3_e.c	541	assert( jp[0].delta >= 0 );
P2P_Joints_TG3_e.c	541	assert( jp[0].a1 <= -1 );
P2P_Joints_TG3_e.c	541	assert( jp[0].a1 != 0 );
P2P_Joints_TG3_e.c	541	assert( in[0] != 0 );
P2P_Joints_TG3_e.c	541	assert( c != 0 );
P2P_Joints_TG3_e.c	541	assert( b <= 0 );
P2P_Joints_TG3_e.c	541	assert( a == 0 );
P2P_Joints_TG3_e.c	541	assert( Vp2 == 134516633 );
P2P_Joints_TG3_e.c	541	assert( Vp1 >= 1 );
P2P_Joints_TG3_e.c	541	assert( Vp1 != 0 );
P2P_Joints_TG3_e.c	541	assert( jp[0].v == _ret_476 );
P2P_Joints_TG3_e.c	541	assert( jl[1] == jp[0].initVel );
P2P_Joints_TG3_e.c	541	assert( fb[0] == jp[0].initPos );
P2P_Joints_TG3_e.c	541	assert( a == totalTime );
P2P_Joints_TG3_e.c	541	assert( a == i );
P2P_Joints_TG3_e.c	541	assert( Vp1 == jp[0].a2 );
P2P_Joints_TG3_e.c	541	assert( Vp1 == jl[3] );
P2P_Joints_TG3_e.c	545	assert( _ret_479 != sqop );
P2P_Joints_TG3_e.c	545	assert( jp[0].t3 <= sqop );
P2P_Joints_TG3_e.c	545	assert( jp[0].t3 <= _ret_479 );
P2P_Joints_TG3_e.c	545	assert( jp[0].t2 < sqop );
P2P_Joints_TG3_e.c	545	assert( jp[0].t2 < _ret_479 );
P2P_Joints_TG3_e.c	545	assert( jp[0].t2 < jp[0].t3 );
P2P_Joints_TG3_e.c	545	assert( jp[0].t3 % jp[0].t1 == 0 );
P2P_Joints_TG3_e.c	545	assert( jp[0].t1 > jp[0].t2 );
P2P_Joints_TG3_e.c	545	assert( jp[0].delta > jp[0].t2 );
P2P_Joints_TG3_e.c	545	assert( jp[0].a1 < sqop );
P2P_Joints_TG3_e.c	545	assert( jp[0].a1 < _ret_479 );
P2P_Joints_TG3_e.c	545	assert( jp[0].a1 < jp[0].t3 );
P2P_Joints_TG3_e.c	545	assert( jp[0].a1 != jp[0].t2 );
P2P_Joints_TG3_e.c	545	assert( jp[0].a1 < jp[0].t1 );
P2P_Joints_TG3_e.c	545	assert( jp[0].a1 < jp[0].delta );
P2P_Joints_TG3_e.c	545	assert( jl[2] != sqop );
P2P_Joints_TG3_e.c	545	assert( jl[2] > jp[0].t3 );
P2P_Joints_TG3_e.c	545	assert( jl[2] > jp[0].t2 );
P2P_Joints_TG3_e.c	545	assert( jl[2] > jp[0].t1 );
P2P_Joints_TG3_e.c	545	assert( jl[2] > jp[0].delta );
P2P_Joints_TG3_e.c	545	assert( jl[2] > jp[0].a1 );
P2P_Joints_TG3_e.c	545	assert( jl[1] != sqop );
P2P_Joints_TG3_e.c	545	assert( jl[1] > jp[0].t3 );
P2P_Joints_TG3_e.c	545	assert( jl[1] > jp[0].t2 );
P2P_Joints_TG3_e.c	545	assert( jl[1] > jp[0].t1 );
P2P_Joints_TG3_e.c	545	assert( jl[1] > jp[0].delta );
P2P_Joints_TG3_e.c	545	assert( jl[1] > jp[0].a1 );
P2P_Joints_TG3_e.c	545	assert( in[0] != sqop );
P2P_Joints_TG3_e.c	545	assert( in[0] != _ret_479 );
P2P_Joints_TG3_e.c	545	assert( in[0] != jp[0].t3 );
P2P_Joints_TG3_e.c	545	assert( in[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	545	assert( in[0] >= jp[0].t1 );
P2P_Joints_TG3_e.c	545	assert( in[0] >= jp[0].delta );
P2P_Joints_TG3_e.c	545	assert( in[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	545	assert( in[0] < jl[2] );
P2P_Joints_TG3_e.c	545	assert( in[0] < jl[1] );
P2P_Joints_TG3_e.c	545	assert( fb[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	545	assert( fb[0] != jp[0].delta );
P2P_Joints_TG3_e.c	545	assert( fb[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	545	assert( fb[0] <= in[0] );
P2P_Joints_TG3_e.c	545	assert( c != sqop );
P2P_Joints_TG3_e.c	545	assert( c > _ret_479 );
P2P_Joints_TG3_e.c	545	assert( c > jp[0].t3 );
P2P_Joints_TG3_e.c	545	assert( c > jp[0].t2 );
P2P_Joints_TG3_e.c	545	assert( c > jp[0].t1 );
P2P_Joints_TG3_e.c	545	assert( c > jp[0].delta );
P2P_Joints_TG3_e.c	545	assert( c > jp[0].a1 );
P2P_Joints_TG3_e.c	545	assert( c != jl[2] );
P2P_Joints_TG3_e.c	545	assert( c != jl[1] );
P2P_Joints_TG3_e.c	545	assert( c > in[0] );
P2P_Joints_TG3_e.c	545	assert( c > fb[0] );
P2P_Joints_TG3_e.c	545	assert( b <= sqop );
P2P_Joints_TG3_e.c	545	assert( b < _ret_479 );
P2P_Joints_TG3_e.c	545	assert( b <= jp[0].t3 );
P2P_Joints_TG3_e.c	545	assert( b < jp[0].t1 );
P2P_Joints_TG3_e.c	545	assert( b <= jp[0].delta );
P2P_Joints_TG3_e.c	545	assert( b != jp[0].a1 );
P2P_Joints_TG3_e.c	545	assert( b < jl[2] );
P2P_Joints_TG3_e.c	545	assert( b < jl[1] );
P2P_Joints_TG3_e.c	545	assert( b < in[0] );
P2P_Joints_TG3_e.c	545	assert( b <= fb[0] );
P2P_Joints_TG3_e.c	545	assert( b < c );
P2P_Joints_TG3_e.c	545	assert( a <= sqop );
P2P_Joints_TG3_e.c	545	assert( a < _ret_479 );
P2P_Joints_TG3_e.c	545	assert( a <= jp[0].t3 );
P2P_Joints_TG3_e.c	545	assert( a > jp[0].t2 );
P2P_Joints_TG3_e.c	545	assert( a < jp[0].t1 );
P2P_Joints_TG3_e.c	545	assert( a <= jp[0].delta );
P2P_Joints_TG3_e.c	545	assert( a > jp[0].a1 );
P2P_Joints_TG3_e.c	545	assert( a < jl[2] );
P2P_Joints_TG3_e.c	545	assert( a < jl[1] );
P2P_Joints_TG3_e.c	545	assert( a < in[0] );
P2P_Joints_TG3_e.c	545	assert( a <= fb[0] );
P2P_Joints_TG3_e.c	545	assert( a < c );
P2P_Joints_TG3_e.c	545	assert( a >= b );
P2P_Joints_TG3_e.c	545	assert( Vp2 > sqop );
P2P_Joints_TG3_e.c	545	assert( Vp2 > _ret_479 );
P2P_Joints_TG3_e.c	545	assert( Vp2 > jp[0].t3 );
P2P_Joints_TG3_e.c	545	assert( Vp2 > jp[0].t2 );
P2P_Joints_TG3_e.c	545	assert( Vp2 > jp[0].t1 );
P2P_Joints_TG3_e.c	545	assert( Vp2 > jp[0].delta );
P2P_Joints_TG3_e.c	545	assert( Vp2 > jp[0].a1 );
P2P_Joints_TG3_e.c	545	assert( Vp2 > jl[2] );
P2P_Joints_TG3_e.c	545	assert( Vp2 > jl[1] );
P2P_Joints_TG3_e.c	545	assert( Vp2 > in[0] );
P2P_Joints_TG3_e.c	545	assert( Vp2 > fb[0] );
P2P_Joints_TG3_e.c	545	assert( Vp2 > c );
P2P_Joints_TG3_e.c	545	assert( Vp2 > b );
P2P_Joints_TG3_e.c	545	assert( Vp1 != sqop );
P2P_Joints_TG3_e.c	545	assert( Vp1 != _ret_479 );
P2P_Joints_TG3_e.c	545	assert( Vp1 != jp[0].t3 );
P2P_Joints_TG3_e.c	545	assert( Vp1 > jp[0].t2 );
P2P_Joints_TG3_e.c	545	assert( Vp1 >= jp[0].t1 );
P2P_Joints_TG3_e.c	545	assert( jp[0].a1 % Vp1 == 0 );
P2P_Joints_TG3_e.c	545	assert( Vp1 > jp[0].a1 );
P2P_Joints_TG3_e.c	545	assert( Vp1 % jp[0].a1 == 0 );
P2P_Joints_TG3_e.c	545	assert( Vp1 != jl[2] );
P2P_Joints_TG3_e.c	545	assert( Vp1 != jl[1] );
P2P_Joints_TG3_e.c	545	assert( Vp1 != in[0] );
P2P_Joints_TG3_e.c	545	assert( Vp1 != fb[0] );
P2P_Joints_TG3_e.c	545	assert( Vp1 != c );
P2P_Joints_TG3_e.c	545	assert( Vp1 > b );
P2P_Joints_TG3_e.c	545	assert( Vp1 > a );
P2P_Joints_TG3_e.c	545	assert( Vp1 < Vp2 );
P2P_Joints_TG3_e.c	545	assert( sqop >= 0 );
P2P_Joints_TG3_e.c	545	assert( _ret_479 >= 1 );
P2P_Joints_TG3_e.c	545	assert( _ret_479 != 0 );
P2P_Joints_TG3_e.c	545	assert( jp[0].t3 == 0 || jp[0].t3 == 1 || jp[0].t3 == 14 );
P2P_Joints_TG3_e.c	545	assert( jp[0].t2 != 0 );
P2P_Joints_TG3_e.c	545	assert( jp[0].t1 != 0 );
P2P_Joints_TG3_e.c	545	assert( jp[0].t1 == 1 || jp[0].t1 == 2 || jp[0].t1 == 3 || jp[0].t1 == 9 );
P2P_Joints_TG3_e.c	545	assert( jp[0].delta >= 0 );
P2P_Joints_TG3_e.c	545	assert( jp[0].a1 <= -1 );
P2P_Joints_TG3_e.c	545	assert( jp[0].a1 != 0 );
P2P_Joints_TG3_e.c	545	assert( in[0] != 0 );
P2P_Joints_TG3_e.c	545	assert( c != 0 );
P2P_Joints_TG3_e.c	545	assert( b <= 0 );
P2P_Joints_TG3_e.c	545	assert( a == 0 );
P2P_Joints_TG3_e.c	545	assert( Vp2 == 134516633 );
P2P_Joints_TG3_e.c	545	assert( Vp1 >= 1 );
P2P_Joints_TG3_e.c	545	assert( Vp1 != 0 );
P2P_Joints_TG3_e.c	545	assert( jp[0].v == _ret_479 );
P2P_Joints_TG3_e.c	545	assert( jl[1] == jp[0].initVel );
P2P_Joints_TG3_e.c	545	assert( fb[0] == jp[0].initPos );
P2P_Joints_TG3_e.c	545	assert( a == totalTime );
P2P_Joints_TG3_e.c	545	assert( a == i );
P2P_Joints_TG3_e.c	545	assert( Vp1 == jp[0].a2 );
P2P_Joints_TG3_e.c	545	assert( Vp1 == jl[3] );
P2P_Joints_TG3_e.c	553	assert( _ret_486 != sqop );
P2P_Joints_TG3_e.c	553	assert( jp[0].t3 <= sqop );
P2P_Joints_TG3_e.c	553	assert( jp[0].t3 <= _ret_486 );
P2P_Joints_TG3_e.c	553	assert( jp[0].t2 < sqop );
P2P_Joints_TG3_e.c	553	assert( jp[0].t2 < _ret_486 );
P2P_Joints_TG3_e.c	553	assert( jp[0].t2 < jp[0].t3 );
P2P_Joints_TG3_e.c	553	assert( jp[0].t3 % jp[0].t1 == 0 );
P2P_Joints_TG3_e.c	553	assert( jp[0].t1 > jp[0].t2 );
P2P_Joints_TG3_e.c	553	assert( jp[0].delta > jp[0].t2 );
P2P_Joints_TG3_e.c	553	assert( jp[0].a1 < sqop );
P2P_Joints_TG3_e.c	553	assert( jp[0].a1 < _ret_486 );
P2P_Joints_TG3_e.c	553	assert( jp[0].a1 < jp[0].t3 );
P2P_Joints_TG3_e.c	553	assert( jp[0].a1 != jp[0].t2 );
P2P_Joints_TG3_e.c	553	assert( jp[0].a1 < jp[0].t1 );
P2P_Joints_TG3_e.c	553	assert( jp[0].a1 < jp[0].delta );
P2P_Joints_TG3_e.c	553	assert( jl[2] != sqop );
P2P_Joints_TG3_e.c	553	assert( jl[2] > jp[0].t3 );
P2P_Joints_TG3_e.c	553	assert( jl[2] > jp[0].t2 );
P2P_Joints_TG3_e.c	553	assert( jl[2] > jp[0].t1 );
P2P_Joints_TG3_e.c	553	assert( jl[2] > jp[0].delta );
P2P_Joints_TG3_e.c	553	assert( jl[2] > jp[0].a1 );
P2P_Joints_TG3_e.c	553	assert( jl[1] != sqop );
P2P_Joints_TG3_e.c	553	assert( jl[1] > jp[0].t3 );
P2P_Joints_TG3_e.c	553	assert( jl[1] > jp[0].t2 );
P2P_Joints_TG3_e.c	553	assert( jl[1] > jp[0].t1 );
P2P_Joints_TG3_e.c	553	assert( jl[1] > jp[0].delta );
P2P_Joints_TG3_e.c	553	assert( jl[1] > jp[0].a1 );
P2P_Joints_TG3_e.c	553	assert( in[0] != sqop );
P2P_Joints_TG3_e.c	553	assert( in[0] != _ret_486 );
P2P_Joints_TG3_e.c	553	assert( in[0] != jp[0].t3 );
P2P_Joints_TG3_e.c	553	assert( in[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	553	assert( in[0] >= jp[0].t1 );
P2P_Joints_TG3_e.c	553	assert( in[0] >= jp[0].delta );
P2P_Joints_TG3_e.c	553	assert( in[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	553	assert( in[0] < jl[2] );
P2P_Joints_TG3_e.c	553	assert( in[0] < jl[1] );
P2P_Joints_TG3_e.c	553	assert( fb[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	553	assert( fb[0] != jp[0].delta );
P2P_Joints_TG3_e.c	553	assert( fb[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	553	assert( fb[0] <= in[0] );
P2P_Joints_TG3_e.c	553	assert( c != sqop );
P2P_Joints_TG3_e.c	553	assert( c > _ret_486 );
P2P_Joints_TG3_e.c	553	assert( c > jp[0].t3 );
P2P_Joints_TG3_e.c	553	assert( c > jp[0].t2 );
P2P_Joints_TG3_e.c	553	assert( c > jp[0].t1 );
P2P_Joints_TG3_e.c	553	assert( c > jp[0].delta );
P2P_Joints_TG3_e.c	553	assert( c > jp[0].a1 );
P2P_Joints_TG3_e.c	553	assert( c != jl[2] );
P2P_Joints_TG3_e.c	553	assert( c != jl[1] );
P2P_Joints_TG3_e.c	553	assert( c > in[0] );
P2P_Joints_TG3_e.c	553	assert( c > fb[0] );
P2P_Joints_TG3_e.c	553	assert( b <= sqop );
P2P_Joints_TG3_e.c	553	assert( b < _ret_486 );
P2P_Joints_TG3_e.c	553	assert( b <= jp[0].t3 );
P2P_Joints_TG3_e.c	553	assert( b < jp[0].t1 );
P2P_Joints_TG3_e.c	553	assert( b <= jp[0].delta );
P2P_Joints_TG3_e.c	553	assert( b != jp[0].a1 );
P2P_Joints_TG3_e.c	553	assert( b < jl[2] );
P2P_Joints_TG3_e.c	553	assert( b < jl[1] );
P2P_Joints_TG3_e.c	553	assert( b < in[0] );
P2P_Joints_TG3_e.c	553	assert( b <= fb[0] );
P2P_Joints_TG3_e.c	553	assert( b < c );
P2P_Joints_TG3_e.c	553	assert( a <= sqop );
P2P_Joints_TG3_e.c	553	assert( a < _ret_486 );
P2P_Joints_TG3_e.c	553	assert( a <= jp[0].t3 );
P2P_Joints_TG3_e.c	553	assert( a > jp[0].t2 );
P2P_Joints_TG3_e.c	553	assert( a < jp[0].t1 );
P2P_Joints_TG3_e.c	553	assert( a <= jp[0].delta );
P2P_Joints_TG3_e.c	553	assert( a > jp[0].a1 );
P2P_Joints_TG3_e.c	553	assert( a < jl[2] );
P2P_Joints_TG3_e.c	553	assert( a < jl[1] );
P2P_Joints_TG3_e.c	553	assert( a < in[0] );
P2P_Joints_TG3_e.c	553	assert( a <= fb[0] );
P2P_Joints_TG3_e.c	553	assert( a < c );
P2P_Joints_TG3_e.c	553	assert( a >= b );
P2P_Joints_TG3_e.c	553	assert( Vp2 > sqop );
P2P_Joints_TG3_e.c	553	assert( Vp2 > _ret_486 );
P2P_Joints_TG3_e.c	553	assert( Vp2 > jp[0].t3 );
P2P_Joints_TG3_e.c	553	assert( Vp2 > jp[0].t2 );
P2P_Joints_TG3_e.c	553	assert( Vp2 > jp[0].t1 );
P2P_Joints_TG3_e.c	553	assert( Vp2 > jp[0].delta );
P2P_Joints_TG3_e.c	553	assert( Vp2 > jp[0].a1 );
P2P_Joints_TG3_e.c	553	assert( Vp2 > jl[2] );
P2P_Joints_TG3_e.c	553	assert( Vp2 > jl[1] );
P2P_Joints_TG3_e.c	553	assert( Vp2 > in[0] );
P2P_Joints_TG3_e.c	553	assert( Vp2 > fb[0] );
P2P_Joints_TG3_e.c	553	assert( Vp2 > c );
P2P_Joints_TG3_e.c	553	assert( Vp2 > b );
P2P_Joints_TG3_e.c	553	assert( Vp1 != sqop );
P2P_Joints_TG3_e.c	553	assert( Vp1 != _ret_486 );
P2P_Joints_TG3_e.c	553	assert( Vp1 != jp[0].t3 );
P2P_Joints_TG3_e.c	553	assert( Vp1 > jp[0].t2 );
P2P_Joints_TG3_e.c	553	assert( Vp1 >= jp[0].t1 );
P2P_Joints_TG3_e.c	553	assert( jp[0].a1 % Vp1 == 0 );
P2P_Joints_TG3_e.c	553	assert( Vp1 > jp[0].a1 );
P2P_Joints_TG3_e.c	553	assert( Vp1 % jp[0].a1 == 0 );
P2P_Joints_TG3_e.c	553	assert( Vp1 != jl[2] );
P2P_Joints_TG3_e.c	553	assert( Vp1 != jl[1] );
P2P_Joints_TG3_e.c	553	assert( Vp1 != in[0] );
P2P_Joints_TG3_e.c	553	assert( Vp1 != fb[0] );
P2P_Joints_TG3_e.c	553	assert( Vp1 != c );
P2P_Joints_TG3_e.c	553	assert( Vp1 > b );
P2P_Joints_TG3_e.c	553	assert( Vp1 > a );
P2P_Joints_TG3_e.c	553	assert( Vp1 < Vp2 );
P2P_Joints_TG3_e.c	553	assert( sqop >= 0 );
P2P_Joints_TG3_e.c	553	assert( _ret_486 >= 1 );
P2P_Joints_TG3_e.c	553	assert( _ret_486 != 0 );
P2P_Joints_TG3_e.c	553	assert( jp[0].t3 == 0 || jp[0].t3 == 1 || jp[0].t3 == 14 );
P2P_Joints_TG3_e.c	553	assert( jp[0].t2 != 0 );
P2P_Joints_TG3_e.c	553	assert( jp[0].t1 != 0 );
P2P_Joints_TG3_e.c	553	assert( jp[0].t1 == 1 || jp[0].t1 == 2 || jp[0].t1 == 3 || jp[0].t1 == 9 );
P2P_Joints_TG3_e.c	553	assert( jp[0].delta >= 0 );
P2P_Joints_TG3_e.c	553	assert( jp[0].a1 <= -1 );
P2P_Joints_TG3_e.c	553	assert( jp[0].a1 != 0 );
P2P_Joints_TG3_e.c	553	assert( in[0] != 0 );
P2P_Joints_TG3_e.c	553	assert( c != 0 );
P2P_Joints_TG3_e.c	553	assert( b <= 0 );
P2P_Joints_TG3_e.c	553	assert( a == 0 );
P2P_Joints_TG3_e.c	553	assert( Vp2 == 134516633 );
P2P_Joints_TG3_e.c	553	assert( Vp1 >= 1 );
P2P_Joints_TG3_e.c	553	assert( Vp1 != 0 );
P2P_Joints_TG3_e.c	553	assert( jp[0].v == _ret_486 );
P2P_Joints_TG3_e.c	553	assert( jl[1] == jp[0].initVel );
P2P_Joints_TG3_e.c	553	assert( fb[0] == jp[0].initPos );
P2P_Joints_TG3_e.c	553	assert( a == totalTime );
P2P_Joints_TG3_e.c	553	assert( a == i );
P2P_Joints_TG3_e.c	553	assert( Vp1 == jp[0].a2 );
P2P_Joints_TG3_e.c	553	assert( Vp1 == jl[3] );
P2P_Joints_TG3_e.c	557	assert( _ret_489 != sqop );
P2P_Joints_TG3_e.c	557	assert( jp[0].t3 <= sqop );
P2P_Joints_TG3_e.c	557	assert( jp[0].t3 <= _ret_489 );
P2P_Joints_TG3_e.c	557	assert( jp[0].t2 < sqop );
P2P_Joints_TG3_e.c	557	assert( jp[0].t2 < _ret_489 );
P2P_Joints_TG3_e.c	557	assert( jp[0].t2 < jp[0].t3 );
P2P_Joints_TG3_e.c	557	assert( jp[0].t3 % jp[0].t1 == 0 );
P2P_Joints_TG3_e.c	557	assert( jp[0].t1 > jp[0].t2 );
P2P_Joints_TG3_e.c	557	assert( jp[0].delta > jp[0].t2 );
P2P_Joints_TG3_e.c	557	assert( jp[0].a1 < sqop );
P2P_Joints_TG3_e.c	557	assert( jp[0].a1 < _ret_489 );
P2P_Joints_TG3_e.c	557	assert( jp[0].a1 < jp[0].t3 );
P2P_Joints_TG3_e.c	557	assert( jp[0].a1 != jp[0].t2 );
P2P_Joints_TG3_e.c	557	assert( jp[0].a1 < jp[0].t1 );
P2P_Joints_TG3_e.c	557	assert( jp[0].a1 < jp[0].delta );
P2P_Joints_TG3_e.c	557	assert( jl[2] != sqop );
P2P_Joints_TG3_e.c	557	assert( jl[2] > jp[0].t3 );
P2P_Joints_TG3_e.c	557	assert( jl[2] > jp[0].t2 );
P2P_Joints_TG3_e.c	557	assert( jl[2] > jp[0].t1 );
P2P_Joints_TG3_e.c	557	assert( jl[2] > jp[0].delta );
P2P_Joints_TG3_e.c	557	assert( jl[2] > jp[0].a1 );
P2P_Joints_TG3_e.c	557	assert( jl[1] != sqop );
P2P_Joints_TG3_e.c	557	assert( jl[1] > jp[0].t3 );
P2P_Joints_TG3_e.c	557	assert( jl[1] > jp[0].t2 );
P2P_Joints_TG3_e.c	557	assert( jl[1] > jp[0].t1 );
P2P_Joints_TG3_e.c	557	assert( jl[1] > jp[0].delta );
P2P_Joints_TG3_e.c	557	assert( jl[1] > jp[0].a1 );
P2P_Joints_TG3_e.c	557	assert( in[0] != sqop );
P2P_Joints_TG3_e.c	557	assert( in[0] != _ret_489 );
P2P_Joints_TG3_e.c	557	assert( in[0] != jp[0].t3 );
P2P_Joints_TG3_e.c	557	assert( in[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	557	assert( in[0] >= jp[0].t1 );
P2P_Joints_TG3_e.c	557	assert( in[0] >= jp[0].delta );
P2P_Joints_TG3_e.c	557	assert( in[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	557	assert( in[0] < jl[2] );
P2P_Joints_TG3_e.c	557	assert( in[0] < jl[1] );
P2P_Joints_TG3_e.c	557	assert( fb[0] > jp[0].t2 );
P2P_Joints_TG3_e.c	557	assert( fb[0] != jp[0].delta );
P2P_Joints_TG3_e.c	557	assert( fb[0] > jp[0].a1 );
P2P_Joints_TG3_e.c	557	assert( fb[0] <= in[0] );
P2P_Joints_TG3_e.c	557	assert( c != sqop );
P2P_Joints_TG3_e.c	557	assert( c > _ret_489 );
P2P_Joints_TG3_e.c	557	assert( c > jp[0].t3 );
P2P_Joints_TG3_e.c	557	assert( c > jp[0].t2 );
P2P_Joints_TG3_e.c	557	assert( c > jp[0].t1 );
P2P_Joints_TG3_e.c	557	assert( c > jp[0].delta );
P2P_Joints_TG3_e.c	557	assert( c > jp[0].a1 );
P2P_Joints_TG3_e.c	557	assert( c != jl[2] );
P2P_Joints_TG3_e.c	557	assert( c != jl[1] );
P2P_Joints_TG3_e.c	557	assert( c > in[0] );
P2P_Joints_TG3_e.c	557	assert( c > fb[0] );
P2P_Joints_TG3_e.c	557	assert( b <= sqop );
P2P_Joints_TG3_e.c	557	assert( b < _ret_489 );
P2P_Joints_TG3_e.c	557	assert( b <= jp[0].t3 );
P2P_Joints_TG3_e.c	557	assert( b < jp[0].t1 );
P2P_Joints_TG3_e.c	557	assert( b <= jp[0].delta );
P2P_Joints_TG3_e.c	557	assert( b != jp[0].a1 );
P2P_Joints_TG3_e.c	557	assert( b < jl[2] );
P2P_Joints_TG3_e.c	557	assert( b < jl[1] );
P2P_Joints_TG3_e.c	557	assert( b < in[0] );
P2P_Joints_TG3_e.c	557	assert( b <= fb[0] );
P2P_Joints_TG3_e.c	557	assert( b < c );
P2P_Joints_TG3_e.c	557	assert( a <= sqop );
P2P_Joints_TG3_e.c	557	assert( a < _ret_489 );
P2P_Joints_TG3_e.c	557	assert( a <= jp[0].t3 );
P2P_Joints_TG3_e.c	557	assert( a > jp[0].t2 );
P2P_Joints_TG3_e.c	557	assert( a < jp[0].t1 );
P2P_Joints_TG3_e.c	557	assert( a <= jp[0].delta );
P2P_Joints_TG3_e.c	557	assert( a > jp[0].a1 );
P2P_Joints_TG3_e.c	557	assert( a < jl[2] );
P2P_Joints_TG3_e.c	557	assert( a < jl[1] );
P2P_Joints_TG3_e.c	557	assert( a < in[0] );
P2P_Joints_TG3_e.c	557	assert( a <= fb[0] );
P2P_Joints_TG3_e.c	557	assert( a < c );
P2P_Joints_TG3_e.c	557	assert( a >= b );
P2P_Joints_TG3_e.c	557	assert( Vp2 > sqop );
P2P_Joints_TG3_e.c	557	assert( Vp2 > _ret_489 );
P2P_Joints_TG3_e.c	557	assert( Vp2 > jp[0].t3 );
P2P_Joints_TG3_e.c	557	assert( Vp2 > jp[0].t2 );
P2P_Joints_TG3_e.c	557	assert( Vp2 > jp[0].t1 );
P2P_Joints_TG3_e.c	557	assert( Vp2 > jp[0].delta );
P2P_Joints_TG3_e.c	557	assert( Vp2 > jp[0].a1 );
P2P_Joints_TG3_e.c	557	assert( Vp2 > jl[2] );
P2P_Joints_TG3_e.c	557	assert( Vp2 > jl[1] );
P2P_Joints_TG3_e.c	557	assert( Vp2 > in[0] );
P2P_Joints_TG3_e.c	557	assert( Vp2 > fb[0] );
P2P_Joints_TG3_e.c	557	assert( Vp2 > c );
P2P_Joints_TG3_e.c	557	assert( Vp2 > b );
P2P_Joints_TG3_e.c	557	assert( Vp1 != sqop );
P2P_Joints_TG3_e.c	557	assert( Vp1 != _ret_489 );
P2P_Joints_TG3_e.c	557	assert( Vp1 != jp[0].t3 );
P2P_Joints_TG3_e.c	557	assert( Vp1 > jp[0].t2 );
P2P_Joints_TG3_e.c	557	assert( Vp1 >= jp[0].t1 );
P2P_Joints_TG3_e.c	557	assert( jp[0].a1 % Vp1 == 0 );
P2P_Joints_TG3_e.c	557	assert( Vp1 > jp[0].a1 );
P2P_Joints_TG3_e.c	557	assert( Vp1 % jp[0].a1 == 0 );
P2P_Joints_TG3_e.c	557	assert( Vp1 != jl[2] );
P2P_Joints_TG3_e.c	557	assert( Vp1 != jl[1] );
P2P_Joints_TG3_e.c	557	assert( Vp1 != in[0] );
P2P_Joints_TG3_e.c	557	assert( Vp1 != fb[0] );
P2P_Joints_TG3_e.c	557	assert( Vp1 != c );
P2P_Joints_TG3_e.c	557	assert( Vp1 > b );
P2P_Joints_TG3_e.c	557	assert( Vp1 > a );
P2P_Joints_TG3_e.c	557	assert( Vp1 < Vp2 );
P2P_Joints_TG3_e.c	557	assert( sqop >= 0 );
P2P_Joints_TG3_e.c	557	assert( _ret_489 >= 1 );
P2P_Joints_TG3_e.c	557	assert( _ret_489 != 0 );
P2P_Joints_TG3_e.c	557	assert( jp[0].t3 == 0 || jp[0].t3 == 1 || jp[0].t3 == 14 );
P2P_Joints_TG3_e.c	557	assert( jp[0].t2 != 0 );
P2P_Joints_TG3_e.c	557	assert( jp[0].t1 != 0 );
P2P_Joints_TG3_e.c	557	assert( jp[0].t1 == 1 || jp[0].t1 == 2 || jp[0].t1 == 3 || jp[0].t1 == 9 );
P2P_Joints_TG3_e.c	557	assert( jp[0].delta >= 0 );
P2P_Joints_TG3_e.c	557	assert( jp[0].a1 <= -1 );
P2P_Joints_TG3_e.c	557	assert( jp[0].a1 != 0 );
P2P_Joints_TG3_e.c	557	assert( in[0] != 0 );
P2P_Joints_TG3_e.c	557	assert( c != 0 );
P2P_Joints_TG3_e.c	557	assert( b <= 0 );
P2P_Joints_TG3_e.c	557	assert( a == 0 );
P2P_Joints_TG3_e.c	557	assert( Vp2 == 134516633 );
P2P_Joints_TG3_e.c	557	assert( Vp1 >= 1 );
P2P_Joints_TG3_e.c	557	assert( Vp1 != 0 );
P2P_Joints_TG3_e.c	557	assert( jp[0].v == _ret_489 );
P2P_Joints_TG3_e.c	557	assert( jl[1] == jp[0].initVel );
P2P_Joints_TG3_e.c	557	assert( fb[0] == jp[0].initPos );
P2P_Joints_TG3_e.c	557	assert( a == totalTime );
P2P_Joints_TG3_e.c	557	assert( a == i );
P2P_Joints_TG3_e.c	557	assert( Vp1 == jp[0].a2 );
P2P_Joints_TG3_e.c	557	assert( Vp1 == jl[3] );
